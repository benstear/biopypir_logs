---
name: BIOPYPIR
on: 
  repository_dispatch:
     types: [autorun]
     
  #schedule:
  #  - cron: '0 0 * * 0' 
  #push: # remove when youre done testing workflow
  #  paths-ignore: 
  #    - 'logs/**.json' 
  #    - 'biopypir_matrix.md'
  #    -  'utils/package_params.json'
    
  #  get linux distribution 
    
jobs:
  run_tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.6,3.7] 
        os: [ubuntu-latest] #,windows-latest, macOS-latest] 
    steps:
   # - name: Create cache file
   #   run: mkdir check-SHA; echo ${{ github.sha }} > github-sha.txt; cat github-sha.txt
    #===============================================#
   # - name: Check SHA
   #   id: check_sha
   #   uses: actions/cache@v1
   #   with:
   #     path: check-SHA
   #     key: check-SHA-${{ github.sha }}
    #===============================================#
   # - name: Some subsequent steps
   #   if: steps.check_sha.outputs.cache-hit == 'true'
   #   run: echo "Cache hit not found...Execute the subsequent steps"; exit 1 # no way to exit nicely?
    #===============================================#
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
    - name: Dump runner context
      env:
        RUNNER_CONTEXT: ${{ toJson(runner) }}
      run: echo "$RUNNER_CONTEXT"
    
    - name: set environment variables
      run: |     #echo "${{ github.event.client_payload.PACKAGE }}"
        echo "::set-env name=PACKAGE::${{ github.event.client_payload.PACKAGE }}"
        echo "::set-env name=OWNER::${{ github.event.client_payload.OWNER }}"
        echo "::set-env name=Owner_Repo::${{ github.event.client_payload.Owner_Repo }}"
        echo "::set-env name=test_suite::${{ github.event.client_payload.test_suite }}"
        echo "::set-env name=tests_dir::${{ github.event.client_payload.tests_dir }}"
        echo "::set-env name=ignore_tests::${{ github.event.client_payload.ignore_tests }}"
        echo "::set-env name=ignore_lint::${{ github.event.client_payload.ignore_lint }}"
        echo "::set-env name=PIP_TEST::${{ github.event.client_payload.pip }}"
        
        echo ${{env.PIP_TEST}}
        echo ${{env.ignore_lint}}
        echo ${{env.OWNER}}
        printenv
        
    - run: |  
        echo ${{env.PIP_TEST}}
        echo ${{env.ignore_lint}}
        echo ${{env.OWNER}}
        printenv
    #===============================================#
    - name:  CHECKOUT ${{env.OWNER}} ${{env.PACKAGE}} 
      uses: actions/checkout@v2     
      with:
        repository: ${{env.Owner_Repo}} 
    
    - name: Get Workflow Helper
      run: |
        curl -L -o biopypir_utils.sh "https://raw.githubusercontent.com/benstear/biopypir_logs/master/utils/workflow_helper.sh"      
        chmod +x biopypir_utils.sh  
    #    ./biopypir_utils.sh  "SET ENV"  

    - name: Set Up ${{matrix.os}}-py${{matrix.python-version}}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}   
    #===============================================#
    - name: INSTALL dependencies                         #  how to handle this step?
      run: |
        pip install --upgrade pip setuptools wheel  
        pip install pylint
        pip install pytest
        pip install coverage
        pip install pytest-cov
        pip install pytest-mpl    
    #pip install --no-binary :all: nmslib  #pip install .
    #===============================================#
    - name: LINT
      id: linter
      run: ./biopypir_utils.sh "LINT" 
    #===============================================#
    - name: BUILD
      id: builder
      run: ./biopypir_utils.sh  "BUILD"
    #===============================================#
    - name: PYTEST
      id: tester
      run: ./biopypir_utils.sh "TEST"  
    #===============================================#
    - name: PIP deployment test 
      continue-on-error: true
      id: pip_deploy_test
      if: "${{ env.PIP_TEST }}" 
      uses: BSFishy/pip-action@v1
      with:
        packages: "${{ env.PACKAGE }}"
        
    - name: Check Pip 
      run: |
        if [ "${{ steps.pip_deploy_test.conclusion }}"  = "success" ]; then
              echo "::set-env name=pip_test_result::True"
        elif [ ${{ steps.pip_deploy_test.conclusion }} = 'failure' ]; then
              echo "::set-env name=pip_test_result::False"
        elif [ ${{ steps.pip_deploy_test.conclusion }} = 'skipped' ]; then
              echo "::set-env name=pip_test_result::Package Not On PIP"
        fi     
    #===============================================#
    - name: GATHER outputs # removed and license check passing steps
      continue-on-error: true
      run: |
        ./biopypir_utils.sh "GATHER" "${{matrix.python-version}}" "${{matrix.os}}" \
        "${{steps.linter.outputs.pylint-score}}" \
        "${{steps.tester.outputs.pytest_score}}" \
         "${{ env.pip_test_result }}" 
        "True"
   #===============================================#
    - name: UPLOAD artifact
      uses: actions/upload-artifact@v2-preview
      with:  
        name: biopypir-${{matrix.os}}-py${{matrix.python-version}}
        path: biopypir-*.json


  job2:
      needs: [run_tests] 
      if: always()
      runs-on: [ubuntu-latest] 
      steps:
        - name: Check-Out Repo #  checkout biopypir_logs repo, not scedar/manubot/etc.
          uses: actions/checkout@v2
         #===============================================# 
        - name: Set up Python ${{ matrix.python-version }}
          uses: actions/setup-python@v2
          with:
            python-version: '3.7'
        #===============================================# 
        - name: Download artifact
          uses: actions/download-artifact@v2-preview 
          with: # version2 automatically downloads all artifacts in path
            path: parallel_runs/
        #===============================================#
        - name: check for any job success, and cURL helper script
          run: |  
            curl -L -o biopypir_utils.sh "https://raw.githubusercontent.com/benstear/biopypir_logs/master/utils/workflow_helper.sh"      
            chmod +x biopypir_utils.sh; ./biopypir_utils.sh "SET ENV" 
        #===============================================#
        - name: validate-license-action
          uses: datreeio/validate-license-action@v1.0.0 
          with:
            args: 'MIT, ISC, BSD'
        #===============================================#
        - name: EVALUATE TEST RESULTS
          run: ./biopypir_utils.sh "EVALUATE"
        #===============================================#
        - name: GET REPO STATISTICS
          run:  |
              echo "::set-env name=OWNER::${{ github.event.client_payload.OWNER }}"
              echo  ${{env.OWNER}}
              ./biopypir_utils.sh "STATISTICS"
        #===============================================# 
        - name: CLEAN UP
          run: ./biopypir_utils.sh "CLEAN UP"
        #- run: |
        #    pip install --upgrade pip setuptools wheel 
        #    python3 -m pip install pandas numpy tabulate
        #    python3 utils/process_logs.py
       #===============================================# 
        - name: DELETE ARTIFACTS
          uses: geekyeggo/delete-artifact@1-glob-support
          with:
              name: biopypir-*
              useGlob: true 
       #===============================================# 
        - name: Add & Commit 
          #if: always()
          uses: EndBug/add-and-commit@v4.1.0
          with:
            add: .  #${{env.PACKAGE}}_${{github.run_id}}.json
            message: 'Commit ${{env.PACKAGE}} workflow run # ${{github.run_number}}  (${{env.biopypir_workflow_status}})'
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 


