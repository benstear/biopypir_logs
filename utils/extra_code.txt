#### FROM  WORKFLOW #####
       #===============================================#
        #- name: Commit 
        #  env:
        #    API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        #  run: |
        #      git config --global user.email "bjs385@drexel.edu"    
        #      git config --global user.name "benstear"
        #      echo "Sending json log to biopypir_logs/logs"
        #      git pull https://github.com/benstear/biopypir_logs.git
        #      mv payload_${{github.run_id}}.json logs/
        #      git add logs/payload_${{github.run_id}}.json
        #      git push master # commit -m 'commit ${{env.PACKAGE}} workflow log # ${{github.run_id}}'
          
          #rm scores.json stats.json final.json
          #mv final.json biopypir_logs #cd biopypir_logs
          # clone, delete files in the clone, and copy (new) files over
          # this handles file deletions, additions, and changes seamlessly
          #git clone --depth 1 https://$API_TOKEN_GITHUB@github.com/$GITHUB_USERNAME/$NAME.git $CLONE_DIR &> /dev/null
          #cd $CLONE_DIR
          #find . | grep -v ".git" | grep -v "^\.*$" | xargs rm -rf # delete all files (to handle deletions in monorepo)
          #cp -r $BASE/$folder/. .

            #mkdir temp_git
            #cd temp_git
            #git init   #  add .git folder and initialize 
            #git remote add origin  https://github.com/benstear/biopypir_logs.git # connect to a repo
            #git pull origin master # pull repo to local 
        #===============================================#
        #- name: Global webhook
        #  if: always() 
        #  uses: muinmomin/webhook-action@v1.0.0
        #  with:
        #    url: ${{ secrets.WEBHOOK_URL }}
        #    data: final.json   
        #- name: Webhook
        #  uses: joelwmale/webhook-action@master
        #  env:
        #    WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        #    data: final.json
        
#### FROM HELPER SCRIPT #################

  #echo '------artifacts name and id--------'
  #curl -X GET -s "https://api.github.com/repos/benstear/scedar/actions/runs/90141152/artifacts" | jq ".id" > art.json
  #cat art.json
  #echo '-----artifact IDs------'
  #URL="https://api.github.com/repos/benstear/scedar/actions/artifacts"
  #echo $(curl -X GET $URL |jq '.artifacts[].id') > art_ids.txt
  #cat art_ids.txt
  #echo '----delete artifacts-----'
  #curl -X DELETE -u "admin:$secrets.GITHUB_TOKEN" "https://api.github.com/repos/benstear/scedar/actions/artifacts/*"
  #echo "done"
  
  
     #owner_repo=$(cat repo.json | jq ".full_name")
    #package_name=$(cat repo.json | jq ".name")
    #description=$(cat repo.json | jq ".description")
    #created_at=$(cat repo.json | jq ".created_at")
    #last_commit=$(cat repo.json | jq ".pushed_at")  # ? 
    #forks=$(cat repo.json | jq ".forks")  
    #watchers=$(cat repo.json | jq ".subscribers_count")
    #stars=$(cat repo.json | jq ".stargazers_count")
    #homepage_url=$(cat repo.json | jq ".homepage")
    #has_wiki=$(cat repo.json | jq ".has_wiki")
    #open_issues=$(cat repo.json | jq ".open_issues_count")
    #has_downloads$(cat repo.json | jq ".has_downloads")
    #contributors=$(cat repo.json | jq ".contributors_url")      
    
    #jq -n --arg owner_repo $owner_repo --arg package_name   
      
      #"{Owner_Repo: .full_name, Package: .name, Description: .description,
      #date_created: .created_at, last_commit: .pushed_at, forks: .forks, watchers: 
      #.subscribers_count, stars: .stargazers_count, contributors: .contributors_url,
      #homepage_url: .homepage, has_wiki: .has_wiki, open_issues: .open_issues_count,
      #has_downloads: .has_downloads}" > stats.json
      
  
